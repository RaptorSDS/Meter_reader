import sys
import serial
import time
from smllib import SmlStreamReader, const
from collections import deque
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QGridLayout, QGroupBox,
    QLabel, QComboBox, QPushButton, QVBoxLayout, QTableWidget,
    QTableWidgetItem, QMessageBox, QPlainTextEdit, QFileDialog, QHBoxLayout
)
from PyQt5.QtCore import QTimer, Qt

class SmartMeterReader(QMainWindow):
    def __init__(self):
        super().__init__()
        self.serial_connection = None
        self.read_timer = None
        self.init_ui()
        self.sml_reader = SmlStreamReader()
        self.raw_buffer = bytearray()
        self.measurement_history = deque(maxlen=60)
        self.update_interval = 1  # Default update interval in seconds
        self.frame_count = 0

    def init_ui(self):
        """Initializes the complete UI"""
        self.setWindowTitle("Smart Meter Ausleser")
        self.setMinimumSize(800, 600)
        
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        layout = QGridLayout(main_widget)
        
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        
        # Connection settings
        connection_group = self.create_connection_group()
        left_layout.addWidget(connection_group)
        
        # Top-right Info and Save buttons
        button_layout = QHBoxLayout()
        button_layout.addStretch()
        info_button = QPushButton("?")
        info_button.setFixedSize(30, 30)
        info_button.clicked.connect(self.show_info)
        button_layout.addWidget(info_button, alignment=Qt.AlignRight)
        
        save_button = QPushButton("Daten speichern")
        save_button.setFixedSize(120, 30)
        save_button.clicked.connect(self.save_last_minute_data)
        button_layout.addWidget(save_button, alignment=Qt.AlignRight)
        
        left_layout.addLayout(button_layout)
        
        # Debug view
        debug_group = self.create_debug_group()
        left_layout.addWidget(debug_group)
        
        # Create table group
        table_group = self.create_table_group()
        
        layout.addWidget(left_widget, 0, 0)
        layout.addWidget(table_group, 0, 1)  # Changed from 1, 0 to 0, 1
        layout.setColumnStretch(1, 1)  # Make the table take more space
        
        self.statusBar().showMessage('Bereit')

    def create_connection_group(self):
        """Creates the connection settings group"""
        connection_group = QGroupBox("Verbindungseinstellungen")
        layout = QVBoxLayout()
        
        # Port selection
        self.port_combo = QComboBox()
        self.port_combo.addItems(self.get_serial_ports())
        
        # Baud rate selection with default 9600
        self.baud_rate_combo = QComboBox()
        self.baud_rate_combo.addItems(["9600", "19200", "38400", "57600", "115200"])
        self.baud_rate_combo.setCurrentText("9600")
        
        # Data bits with default 8
        self.data_bits_combo = QComboBox()
        self.data_bits_combo.addItems(["6", "7", "8"])
        self.data_bits_combo.setCurrentText("8")
        
        # Parity with default None
        self.parity_combo = QComboBox()
        self.parity_combo.addItems(["None", "Odd", "Even"])
        self.parity_combo.setCurrentText("None")
        
        # Update Interval Selection with default 1s
        self.update_interval_combo = QComboBox()
        self.update_interval_combo.addItems(["1s", "5s", "15s"])
        self.update_interval_combo.setCurrentText("1s")
        self.update_interval_combo.currentIndexChanged.connect(self.set_update_interval)
        
        # Connect/Disconnect buttons
        connect_button = QPushButton("Verbinden")
        connect_button.clicked.connect(self.connect_serial)
        
        disconnect_button = QPushButton("Trennen")
        disconnect_button.clicked.connect(self.disconnect_serial)
        
        layout.addWidget(QLabel("Port:"))
        layout.addWidget(self.port_combo)
        layout.addWidget(QLabel("Baudrate:"))
        layout.addWidget(self.baud_rate_combo)
        layout.addWidget(QLabel("Datenbits:"))
        layout.addWidget(self.data_bits_combo)
        layout.addWidget(QLabel("Parit채t:"))
        layout.addWidget(self.parity_combo)
        layout.addWidget(QLabel("Aktualisierungsintervall:"))
        layout.addWidget(self.update_interval_combo)
        layout.addWidget(connect_button)
        layout.addWidget(disconnect_button)
        
        connection_group.setLayout(layout)
        return connection_group

    def create_debug_group(self):
        """Creates the debug view"""
        debug_group = QGroupBox("Debug-Anzeige")
        self.debug_output = QPlainTextEdit()
        self.debug_output.setReadOnly(True)
        debug_layout = QVBoxLayout()
        debug_layout.addWidget(self.debug_output)
        debug_group.setLayout(debug_layout)
        return debug_group

    def create_table_group(self):
        """Creates the table for OBIS values"""
        table_group = QGroupBox("OBIS-Werte")
        self.table_widget = QTableWidget()
        self.table_widget.setColumnCount(3)
        self.table_widget.setHorizontalHeaderLabels(['OBIS-Code', 'Wert', 'Einheit'])
        layout = QVBoxLayout()
        layout.addWidget(self.table_widget)
        table_group.setLayout(layout)
        return table_group

    def get_serial_ports(self):
        """Returns a list of available serial ports"""
        ports = [f"COM{i}" for i in range(1, 256)]
        available_ports = []
        for port in ports:
            try:
                s = serial.Serial(port)
                s.close()
                available_ports.append(port)
            except (OSError, serial.SerialException):
                pass
        return available_ports or ["Keine Ports gefunden"]

    def set_update_interval(self):
        """Updates the data display interval"""
        interval_text = self.update_interval_combo.currentText()
        self.update_interval = int(interval_text.replace("s", ""))

    def show_info(self):
        """Displays information about the program"""
        info_text = (
            "Smart Meter Ausleser\n\n"
            "Entwickelt von Tobias Baumann\n"
            "GitHub: https://github.com/RaptorSDS/\n"
            "Hilfe durch Claude AI 3.5 / ChatGPT 4\n\n"
            "Dieses Programm steht unter der GNU General Public License (GPL).\n\n"
            "Verwendete Bibliotheken:\n"
            "- smllib von spaceman_spiff (GNU License)\n"
            "- PyQt5 f체r die Benutzeroberfl채che\n\n"
            "Copyright (C) 2024 Tobias Baumann"
        )
        QMessageBox.information(self, "Info", info_text)

    def connect_serial(self):
        """Connects to the selected serial port"""
        try:
            port = self.port_combo.currentText()
            if port == "Keine Ports gefunden":
                raise ValueError("Kein COM-Port verf체gbar")
                
            baud_rate = int(self.baud_rate_combo.currentText())
            data_bits = int(self.data_bits_combo.currentText())
            parity_map = {"None": serial.PARITY_NONE, "Odd": serial.PARITY_ODD, "Even": serial.PARITY_EVEN}
            parity = parity_map[self.parity_combo.currentText()]

            if self.serial_connection and self.serial_connection.is_open:
                self.serial_connection.close()

            self.serial_connection = serial.Serial(
                port=port,
                baudrate=baud_rate,
                bytesize=data_bits,
                parity=parity,
                timeout=1
            )
            
            if self.serial_connection.is_open:
                self.debug_output.appendPlainText(f"Verbunden mit {port}")
                if self.read_timer is None:
                    self.read_timer = QTimer()
                    self.read_timer.timeout.connect(self.read_serial_data)
                self.read_timer.start(1000)
                self.statusBar().showMessage(f'Verbunden mit {port}')
        except Exception as e:
            QMessageBox.critical(self, "Verbindungsfehler", f"Fehler beim Verbinden: {str(e)}")
            self.debug_output.appendPlainText(f"Verbindungsfehler: {str(e)}")

    def disconnect_serial(self):
        """Disconnects the serial connection"""
        try:
            if self.serial_connection and self.serial_connection.is_open:
                self.serial_connection.close()
                self.debug_output.appendPlainText("Verbindung getrennt.")
                self.statusBar().showMessage('Verbindung getrennt')
            if self.read_timer:
                self.read_timer.stop()
        except Exception as e:
            self.debug_output.appendPlainText(f"Fehler beim Trennen der Verbindung: {str(e)}")

    def read_serial_data(self):
        """Reads data from serial and updates the table with OBIS values"""
        if not (self.serial_connection and self.serial_connection.is_open):
            return

        try:
            data = self.serial_connection.read_all()
            if data:
                self.raw_buffer.extend(data)
                
                self.sml_reader.add(self.raw_buffer)
                sml_frame = self.sml_reader.get_frame()
                
                if sml_frame:
                    self.raw_buffer.clear()
                    parsed_msgs = sml_frame.parse_frame()
                    if parsed_msgs:
                        self.frame_count += 1
                        obis_values = parsed_msgs[1].message_body.val_list
                        self.debug_output.appendPlainText(f"Frame empfangen: {self.frame_count}")
                        self.measurement_history.append(obis_values)
                        
                        if self.frame_count % self.update_interval == 0:
                            self.display_obis_values(obis_values)
        except Exception as e:
            self.debug_output.appendPlainText(f"Fehler beim Lesen der Daten: {str(e)}")

    def display_obis_values(self, obis_values):
        """Displays OBIS values in the table"""
        self.table_widget.setRowCount(len(obis_values))
        
        for row, entry in enumerate(obis_values):
            try:
                obis_short = entry.obis.obis_short
                unit = const.UNITS.get(entry.unit, "")
                
                scaler = entry.scaler if entry.scaler is not None else 0
                scaled_value = entry.value * (10 ** scaler)
                
                items = [
                    QTableWidgetItem(obis_short),
                    QTableWidgetItem(f"{scaled_value}"),
                    QTableWidgetItem(unit)
                ]
                
                highlight = obis_short in ["1.8.0", "2.8.0", "C.1.0", "0.2.0"]
                
                for col, item in enumerate(items):
                    if highlight:
                        item.setBackground(Qt.yellow)
                    self.table_widget.setItem(row, col, item)
                    
            except Exception as e:
                self.debug_output.appendPlainText(f"Fehler beim Anzeigen von OBIS-Wert: {str(e)}")

    def save_last_minute_data(self):
        """Saves the last 60 seconds of data to a file"""
        try:
            if not self.measurement_history:
                QMessageBox.warning(self, "Keine Daten", "Keine Daten zum Speichern verf체gbar!")
                return

            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "Daten speichern",
                "",
                "Textdateien (*.txt);;Alle Dateien (*.*)"
            )
            
            if file_path:
                with open(file_path, "w", encoding='utf-8') as file:
                    file.write("Smart Meter Daten der letzten 60 Sekunden:\n\n")
                    for timestamp, obis_values in enumerate(self.measurement_history):
                        file.write(f"Zeitpunkt {timestamp + 1}:\n")
                        for entry in obis_values:
                            unit = const.UNITS.get(entry.unit, "")
                            scaler = entry.scaler if entry.scaler is not None else 0
                            scaled_value = entry.value * (10 ** scaler)
                            file.write(f"{entry.obis.obis_short}: {scaled_value} {unit}\n")
                        file.write("\n")
                QMessageBox.information(self, "Gespeichert", "Daten erfolgreich gespeichert!")
        except Exception as e:
            QMessageBox.critical(self, "Fehler", f"Fehler beim Speichern: {str(e)}")

    def closeEvent(self, event):
        """Handle application closure"""
        self.disconnect_serial()
        event.accept()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    reader = SmartMeterReader()
    reader.show()
    sys.exit(app.exec_())
