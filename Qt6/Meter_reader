import sys
import serial
import time
from smllib import SmlStreamReader, const
from collections import deque
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QGridLayout, QGroupBox,
    QLabel, QComboBox, QPushButton, QVBoxLayout, QTableWidget,
    QTableWidgetItem, QMessageBox, QPlainTextEdit, QFileDialog, QHBoxLayout
)
from PyQt6.QtCore import QTimer, Qt

class SmartMeterReader(QMainWindow):
    def __init__(self):
        super().__init__()
        self.serial_connection = None
        self.read_timer = None
        self.init_ui()
        self.sml_reader = SmlStreamReader()
        self.raw_buffer = bytearray()
        self.measurement_history = deque(maxlen=60)
        self.update_interval = 1
        self.frame_count = 0

    def init_ui(self):
        """Initializes the complete UI"""
        self.setWindowTitle("Smart Meter Ausleser")
        self.setMinimumSize(800, 600)
        
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        layout = QGridLayout(main_widget)
        
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        
        # Connection settings
        connection_group = self.create_connection_group()
        left_layout.addWidget(connection_group)
        
        # Top-right Info and Save buttons
        button_layout = QHBoxLayout()
        button_layout.addStretch()
        info_button = QPushButton("?")
        info_button.setFixedSize(30, 30)
        info_button.clicked.connect(self.show_info)
        button_layout.addWidget(info_button, alignment=Qt.AlignmentFlag.AlignRight)
        
        save_button = QPushButton("Daten speichern")
        save_button.setFixedSize(120, 30)
        save_button.clicked.connect(self.save_last_minute_data)
        button_layout.addWidget(save_button, alignment=Qt.AlignmentFlag.AlignRight)
        
        left_layout.addLayout(button_layout)
        
        # Debug view
        debug_group = self.create_debug_group()
        left_layout.addWidget(debug_group)
        
        # Create table group
        table_group = self.create_table_group()
        
        layout.addWidget(left_widget, 0, 0)
        layout.addWidget(table_group, 0, 1)
        layout.setColumnStretch(1, 1)
        
        self.statusBar().showMessage('Bereit')

    def create_connection_group(self):
        """Creates the connection settings group"""
        connection_group = QGroupBox("Verbindungseinstellungen")
        layout = QVBoxLayout()
        
        self.port_combo = QComboBox()
        self.port_combo.addItems(self.get_serial_ports())
        
        self.baud_rate_combo = QComboBox()
        self.baud_rate_combo.addItems(["9600", "19200", "38400", "57600", "115200"])
        self.baud_rate_combo.setCurrentText("9600")
        
        self.data_bits_combo = QComboBox()
        self.data_bits_combo.addItems(["6", "7", "8"])
        self.data_bits_combo.setCurrentText("8")
        
        self.parity_combo = QComboBox()
        self.parity_combo.addItems(["None", "Odd", "Even"])
        self.parity_combo.setCurrentText("None")
        
        self.update_interval_combo = QComboBox()
        self.update_interval_combo.addItems(["1s", "5s", "15s"])
        self.update_interval_combo.setCurrentText("1s")
        self.update_interval_combo.currentIndexChanged.connect(self.set_update_interval)
        
        connect_button = QPushButton("Verbinden")
        connect_button.clicked.connect(self.connect_serial)
        
        disconnect_button = QPushButton("Trennen")
        disconnect_button.clicked.connect(self.disconnect_serial)
        
        layout.addWidget(QLabel("Port:"))
        layout.addWidget(self.port_combo)
        layout.addWidget(QLabel("Baudrate:"))
        layout.addWidget(self.baud_rate_combo)
        layout.addWidget(QLabel("Datenbits:"))
        layout.addWidget(self.data_bits_combo)
        layout.addWidget(QLabel("Parit√§t:"))
        layout.addWidget(self.parity_combo)
        layout.addWidget(QLabel("Aktualisierungsintervall:"))
        layout.addWidget(self.update_interval_combo)
        layout.addWidget(connect_button)
        layout.addWidget(disconnect_button)
        
        connection_group.setLayout(layout)
        return connection_group

    def create_debug_group(self):
        """Creates the debug view"""
        debug_group = QGroupBox("Debug-Anzeige")
        self.debug_output = QPlainTextEdit()
        self.debug_output.setReadOnly(True)
        debug_layout = QVBoxLayout()
        debug_layout.addWidget(self.debug_output)
        debug_group.setLayout(debug_layout)
        return debug_group

    def create_table_group(self):
        """Creates the table for OBIS values"""
        table_group = QGroupBox("OBIS-Werte")
        self.table_widget = QTableWidget()
        self.table_widget.setColumnCount(3)
        self.table_widget.setHorizontalHeaderLabels(['OBIS-Code', 'Wert', 'Einheit'])
        layout = QVBoxLayout()
        layout.addWidget(self.table_widget)
        table_group.setLayout(layout)
        return table_group

    # Rest of the methods remain the same, except for these changes:
    
    def display_obis_values(self, obis_values):
        """Displays OBIS values in the table"""
        self.table_widget.setRowCount(len(obis_values))
        
        for row, entry in enumerate(obis_values):
            try:
                obis_short = entry.obis.obis_short
                unit = const.UNITS.get(entry.unit, "")
                
                scaler = entry.scaler if entry.scaler is not None else 0
                scaled_value = entry.value * (10 ** scaler)
                
                items = [
                    QTableWidgetItem(obis_short),
                    QTableWidgetItem(f"{scaled_value}"),
                    QTableWidgetItem(unit)
                ]
                
                highlight = obis_short in ["1.8.0", "2.8.0", "C.1.0", "0.2.0"]
                
                for col, item in enumerate(items):
                    if highlight:
                        item.setBackground(Qt.GlobalColor.yellow)
                    self.table_widget.setItem(row, col, item)
                    
            except Exception as e:
                self.debug_output.appendPlainText(f"Fehler beim Anzeigen von OBIS-Wert: {str(e)}")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    reader = SmartMeterReader()
    reader.show()
    sys.exit(app.exec())  # Note: exec() instead of exec_() in PyQt6
